<style>
    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
    }
    
    .opcache-gui {
        background-color: white;
    }

    
    body {
        background: #000000;
        --color: #00ff00;

    }
    
    .opcache-iframe-content {
        width: 100%;
        height: 100%;
        margin: 0;
        padding: 0;
        background: #000000;
    }
    
    .console-container {
        background: #000000;
        color: #00ff00;
        min-height: 100%;
        height: 100%;
        width: 100%;
        padding: 10px;
        font-family: 'Courier New', 'Liberation Mono', monospace;
        font-size: 12px;
        line-height: 1.4;
        border: 1px solid #333333;
        overflow-y: auto;
        overflow-x: hidden;
    }
    
    .console-header {
        border-bottom: 1px solid #333333;
        padding-bottom: 10px;
        margin-bottom: 20px;
        color: #00ffff;
    }
    
    .console-title {
        color: #00ffff;
        font-size: 16px;
        font-weight: bold;
        margin-bottom: 5px;
    }
    
    .console-subtitle {
        color: #ffff00;
        font-size: 14px;
        margin: 10px 0;
        border-bottom: 1px solid #333333;
        padding-bottom: 5px;
    }
    
    .test-result {
        color: #00ff00;
        background: #001100;
        padding: 5px 10px;
        margin: 2px 0;
        border-left: 3px solid #00ff00;
        font-family: 'Courier New', monospace;
    }
    
    .test-result:before {
        content: "✓ ";
        color: #00ff00;
        font-weight: bold;
    }
    
    .test-error {
        color: #ff0000;
        background: #110000;
        padding: 5px 10px;
        margin: 2px 0;
        border-left: 3px solid #ff0000;
        font-family: 'Courier New', monospace;
        font-weight: bold;
    }
    
    .test-error:before {
        content: "✗ ERROR: ";
        color: #ff0000;
        font-weight: bold;
    }
    
    .performance-card {
        margin: 15px 0;
        border: 1px solid #333333;
        background: #001122;
    }
    
    .performance-card-header {
        background: #002244;
        padding: 10px;
        border-bottom: 1px solid #333333;
    }
    
    .performance-card-header h2 {
        margin: 0;
        font-size: 14px;
        color: #00ffff;
        font-family: 'Courier New', monospace;
        font-weight: bold;
    }
    
    .performance-card-body {
        padding: 15px;
        background: #000011;
    }
    
    .performance-warning {
        color: #ffff00;
        background: #221100;
        padding: 5px 10px;
        margin: 5px 0;
        border-left: 3px solid #ffff00;
        font-family: 'Courier New', monospace;
    }
    
    .performance-warning:before {
        content: "⚠ WARNING: ";
        color: #ffff00;
        font-weight: bold;
    }
    
    .performance-result {
        color: #00dddd;
        background: #001111;
        padding: 3px 10px;
        margin: 2px 0;
        border-left: 2px solid #00dddd;
        font-family: 'Courier New', monospace;
    }
    
    .performance-result:before {
        content: "→ ";
        color: #00dddd;
    }
    
    .performance-error {
        color: #ff0000;
        background: #220000;
        padding: 5px 10px;
        margin: 5px 0;
        border-left: 3px solid #ff0000;
        font-family: 'Courier New', monospace;
        font-weight: bold;
    }
    
    .performance-error:before {
        content: "✗ CRITICAL: ";
        color: #ff0000;
        font-weight: bold;
    }
    
    .opcache-dashboard {
        margin-top: 20px;
        padding: 15px;
        border: 1px solid #333333;
        background: #000022;
    }
    
    .console-prompt {
        color: #00ff00;
        font-weight: bold;
    }
    
    .console-prompt:before {
        content: "root@opcache:~$ ";
        color: #00ffff;
    }
    
    .console-container h1, .console-container h2, .console-container h3 {
        color: #00ffff;
        font-family: 'Courier New', monospace;
        margin: 10px 0 5px 0;
    }
    
    /* Filter Controls */
    .filter-controls {
        background: #111111;
        border: 1px solid #333333;
        padding: 10px;
        margin: 10px 0 20px 0;
        border-radius: 3px;
    }
    
    .filter-controls h4 {
        color: #00ffff;
        margin: 0 0 10px 0;
        font-size: 12px;
    }
    
    .filter-buttons {
        display: flex;
        gap: 10px;
        flex-wrap: wrap;
    }
    
    .filter-btn {
        background: #222222;
        border: 1px solid #555555;
        color: #00ff00;
        padding: 5px 12px;
        font-family: 'Courier New', monospace;
        font-size: 11px;
        cursor: pointer;
        border-radius: 3px;
        transition: all 0.2s;
    }
    
    .filter-btn:hover {
        background: #333333;
        border-color: #777777;
    }
    
    .filter-btn.active {
        background: #00ff00;
        color: #000000;
        border-color: #00ff00;
    }
    
    .filter-btn.error-btn.active {
        background: #ff4444;
        color: #ffffff;
        border-color: #ff4444;
    }
    
    .filter-btn.warning-btn.active {
        background: #ffaa00;
        color: #000000;
        border-color: #ffaa00;
    }
    

    
    /* Hidden filter items */
    .filter-hidden {
        display: none !important;
    }
    
    /* Scrollbar styling for webkit browsers */
    ::-webkit-scrollbar {
        width: 12px;
    }
    
    ::-webkit-scrollbar-track {
        background: #000000;
    }
    
    ::-webkit-scrollbar-thumb {
        background: #333333;
        border-radius: 3px;
    }
    
    ::-webkit-scrollbar-thumb:hover {
        background: #555555;
    }
    .menu-wrapper {
        display: none;
    }

    .collapsible-wrapper {
        background: #000000;
        border: 1px solid #333333;
        margin: 10px 0;
    }

    .collapsible-header {
        background: #001122;
        padding: 10px 15px;
        cursor: pointer;
        border-bottom: 1px solid #333333;
        color: #00ffff;
        font-family: 'Courier New', monospace;
        font-weight: bold;
        display: flex;
        justify-content: space-between;
        align-items: center;
        user-select: none;
    }

    .collapsible-header:hover {
        background: #002244;
    }

    .collapsible-toggle {
        color: #00ff00;
        font-size: 14px;
        transition: transform 0.3s ease;
    }

    .collapsible-content {
        transition: max-height 0.3s ease-out;
        overflow: hidden;
    }

    .collapsible-content.collapsed {
        max-height: 400px; /* Approximately 10 lines * 40px line height */
    }

    .collapsible-content.expanded {
        max-height: none;
    }

    .collapsible-header.collapsed .collapsible-toggle {
        transform: rotate(-90deg);
    }

    .fade-indicator {
        position: relative;
    }

    .fade-indicator.collapsed::after {
        content: "";
        position: absolute;
        bottom: 0;
        left: 0;
        right: 0;
        height: 60px;
        background: linear-gradient(transparent, #000000);
        pointer-events: none;
    }

    li.nav-tab.nav-tab-link-realtime {
        display: none !important;
    }

</style>

<div class="collapsible-wrapper">
    <div class="collapsible-header" onclick="toggleCollapsible()">
        <span>Magento PHP OPcache & Performance Console</span>
        <span class="collapsible-toggle">▼</span>
    </div>
    <div class="collapsible-content expanded fade-indicator" id="console-content">
        <div class="console-container">
            <div class="console-header">
                <div class="console-title">╔══════════════════════════════════════╗</div>
                <div class="console-title">║&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PHP OPcache Monitoring Tool&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;║</div>
                <div class="console-title">╚══════════════════════════════════════╝</div>
            </div>
            
            <!-- Filter Controls -->
            <div class="filter-controls">
                <h4>Filter Results:</h4>
                <div class="filter-buttons">
                    <button class="filter-btn active" onclick="filterResults('all')">Show All</button>
                    <button class="filter-btn error-btn" onclick="filterResults('error')">Errors Only</button>
                    <button class="filter-btn warning-btn" onclick="filterResults('warning')">Warnings Only</button>
                    <!--<button class="filter-btn" onclick="filterResults('errors-warnings')">Errors + Warnings</button>-->
                    <button class="filter-btn" onclick="filterResults('issues')">Issues Only (Errors + Warnings)</button>
                </div>
            </div>

<?php
echo '<div class="console-subtitle">[PERFORMANCE BENCHMARK]</div>';

// Get Performance Toolkit instance
$toolkit = $block->getPerformanceToolkit();

// Run Performance Tests
$performance_iterations = $block->getPerformanceIterations();

echo '<div class="console-prompt">Running CPU benchmark (' . $performance_iterations . ' iterations)...</div>';
$cpu_stats = $toolkit->runPerformanceTestMultipleTimes([$toolkit, 'testCPUPerformance'], $performance_iterations, true, 'CPU Test');
echo "<div class='test-result'><strong>Final CPU Performance: Best: " . number_format($cpu_stats['best'], 2) . "ms | Avg: " . number_format($cpu_stats['avg'], 2) . "ms | 95th: " . number_format($cpu_stats['percentile95'], 2) . "ms | Worst: " . number_format($cpu_stats['worst'], 2) . "ms</strong></div>";

echo '<div class="console-prompt">Testing memory allocation...</div>';
$memory_test = $toolkit->testMemoryAllocation();
echo "<div class='test-result'>Memory Test: " . number_format($memory_test['time'], 4) . " seconds, " . 
     number_format($memory_test['memory'] / 1024 / 1024, 2) . " MB allocated</div>";

echo '<div class="console-prompt">Testing file I/O operations...</div>';
$file_time = $toolkit->testFileOperations();
echo "<div class='test-result'>File I/O Performance: " . number_format($file_time, 4) . " seconds</div>";

echo '<div class="console-prompt">Testing database operations...</div>';
$db_time = $toolkit->testDatabaseOperations($block->getDbPerformanceIterations());
if (is_string($db_time)) {
    echo "<div class='test-error'>Database Test: $db_time</div>";
} else {
    echo "<div class='test-result'>Database Performance: " . number_format($db_time, 4) . " seconds</div>";
}

echo '<div class="console-prompt">Testing MySQL latency (10 requests)...</div>';
$mysql_latency = $toolkit->testMySQLLatency();
if (is_string($mysql_latency)) {
    echo "<div class='test-error'>MySQL Latency Test: $mysql_latency</div>";
} else {
    $avg_ms = $mysql_latency['avg'] * 1000;
    $best_ms = $mysql_latency['best'] * 1000;
    $worst_ms = $mysql_latency['worst'] * 1000;
    $p95_ms = $mysql_latency['p95'] * 1000;
    
    // Determine overall status based on 95th percentile
    if ($mysql_latency['p95'] > 0.1) {
        $status_class = 'test-error';
        $status_text = 'HIGH - consider optimization';
    } elseif ($mysql_latency['p95'] > 0.05) {
        $status_class = 'performance-warning';
        $status_text = 'MODERATE';
    } else {
        $status_class = 'test-result';
        $status_text = 'GOOD';
    }
    
    echo "<div class='{$status_class}'>MySQL Latency ({$status_text}): Best: " . number_format($best_ms, 2) . "ms | Avg: " . number_format($avg_ms, 2) . "ms | 95th: " . number_format($p95_ms, 2) . "ms | Worst: " . number_format($worst_ms, 2) . "ms</div>";
}

echo '<div class="console-prompt">Testing Redis performance (10 requests)...</div>';
$redis_latency = $toolkit->testRedisLatency();
if (is_string($redis_latency)) {
    echo "<div class='test-error'>Redis Test: $redis_latency</div>";
} else {
    $avg_ms = $redis_latency['avg'] * 1000;
    $best_ms = $redis_latency['best'] * 1000;
    $worst_ms = $redis_latency['worst'] * 1000;
    $p95_ms = $redis_latency['p95'] * 1000;
    
    // Determine overall status based on 95th percentile (Redis should be faster)
    if ($redis_latency['p95'] > 0.01) {
        $status_class = 'performance-warning';
        $status_text = 'HIGH for Redis';
    } else {
        $status_class = 'test-result';
        $status_text = 'GOOD';
    }
    
    echo "<div class='{$status_class}'>Redis Latency ({$status_text}): Best: " . number_format($best_ms, 2) . "ms | Avg: " . number_format($avg_ms, 2) . "ms | 95th: " . number_format($p95_ms, 2) . "ms | Worst: " . number_format($worst_ms, 2) . "ms</div>";
}

echo '<div class="console-subtitle">[HTTP PERFORMANCE]</div>';

// Get base URL for testing
$baseUrl = $block->getMagentoBaseUrl();
echo '<div class="console-prompt">Base URL: ' . $baseUrl . '</div>';

// Test main page
echo '<div class="console-prompt">Testing HTTP performance (5 iterations) - Main page...</div>';
$main_page_stats = $toolkit->runPerformanceTestMultipleTimes([$toolkit, 'testHTTPPerformance'], 5, true, 'Main Page', [$baseUrl]);
if (is_string($main_page_stats)) {
    echo "<div class='test-error'>Main Page Performance Test: $main_page_stats</div>";
} else {
    // Determine status based on average response time
    if ($main_page_stats['avg'] > 2000) {
        $status_class = 'test-error';
        $status_text = 'SLOW - check network/server';
    } elseif ($main_page_stats['avg'] > 1000) {
        $status_class = 'performance-warning';
        $status_text = 'MODERATE';
    } else {
        $status_class = 'test-result';
        $status_text = 'GOOD';
    }
    
    echo "<div class='{$status_class}'><strong>Final Main Page Performance ({$status_text}): Best: " . number_format($main_page_stats['best'], 2) . "ms | Avg: " . number_format($main_page_stats['avg'], 2) . "ms | 95th: " . number_format($main_page_stats['percentile95'], 2) . "ms | Worst: " . number_format($main_page_stats['worst'], 2) . "ms</strong></div>";
}

// Test login page
echo '<div class="console-prompt">Testing HTTP performance (5 iterations) - Login page...</div>';
$login_page_stats = $toolkit->runPerformanceTestMultipleTimes([$toolkit, 'testHTTPPerformance'], 5, true, 'Login Page', [$baseUrl . 'customer/account/login/']);
if (is_string($login_page_stats)) {
    echo "<div class='test-error'>Login Page Performance Test: $login_page_stats</div>";
} else {
    // Determine status based on average response time
    if ($login_page_stats['avg'] > 2000) {
        $status_class = 'test-error';
        $status_text = 'SLOW - check network/server';
    } elseif ($login_page_stats['avg'] > 1000) {
        $status_class = 'performance-warning';
        $status_text = 'MODERATE';
    } else {
        $status_class = 'test-result';
        $status_text = 'GOOD';
    }
    
    echo "<div class='{$status_class}'><strong>Final Login Page Performance ({$status_text}): Best: " . number_format($login_page_stats['best'], 2) . "ms | Avg: " . number_format($login_page_stats['avg'], 2) . "ms | 95th: " . number_format($login_page_stats['percentile95'], 2) . "ms | Worst: " . number_format($login_page_stats['worst'], 2) . "ms</strong></div>";
}

// Test random product page (cached)
$http_performance_iterations = $block->getHttpPerformanceIterations();
echo '<div class="console-prompt">Testing HTTP performance (' . $http_performance_iterations . ' iterations) - Random product page (cached)...</div>';
try {
    $randomProductUrl = $block->getRandomProductUrl();
    if ($randomProductUrl) {
        echo '<div class="console-prompt">Random Product URL: ' . $randomProductUrl . '</div>';
        $random_product_stats = $toolkit->runPerformanceTestMultipleTimes([$toolkit, 'testHTTPPerformance'], $http_performance_iterations, true, 'Random Product (Cached)', [$randomProductUrl]);
        if (is_string($random_product_stats)) {
            echo "<div class='test-error'>Random Product Performance Test: $random_product_stats</div>";
        } else {
            // Determine status based on average response time
            if ($random_product_stats['avg'] > 2500) {
                $status_class = 'test-error';
                $status_text = 'SLOW - check server/product performance';
            } elseif ($random_product_stats['avg'] > 1200) {
                $status_class = 'performance-warning';
                $status_text = 'MODERATE';
            } else {
                $status_class = 'test-result';
                $status_text = 'GOOD';
            }
            
            echo "<div class='{$status_class}'><strong>Final Random Product Performance ({$status_text}): Best: " . number_format($random_product_stats['best'], 2) . "ms | Avg: " . number_format($random_product_stats['avg'], 2) . "ms | 95th: " . number_format($random_product_stats['percentile95'], 2) . "ms | Worst: " . number_format($random_product_stats['worst'], 2) . "ms</strong></div>";
        }
    } else {
        echo "<div class='performance-warning'>No random product available for testing - check if products exist and are enabled</div>";
        $random_product_stats = 'No products available';
    }
} catch (\Exception $e) {
    echo "<div class='test-error'>Random Product Test Error: " . $e->getMessage() . "</div>";
    $random_product_stats = 'Error: ' . $e->getMessage();
}

// Test random category page (cached)
echo '<div class="console-prompt">Testing HTTP performance (' . $http_performance_iterations . ' iterations) - Random category page (cached)...</div>';
try {
    $randomCategoryUrl = $block->getRandomCategoryUrl();
    if ($randomCategoryUrl) {
        echo '<div class="console-prompt">Random Category URL: ' . $randomCategoryUrl . '</div>';
        $random_category_stats = $toolkit->runPerformanceTestMultipleTimes([$toolkit, 'testHTTPPerformance'], $http_performance_iterations, true, 'Random Category (Cached)', [$randomCategoryUrl]);
        if (is_string($random_category_stats)) {
            echo "<div class='test-error'>Random Category Performance Test: $random_category_stats</div>";
        } else {
            // Determine status based on average response time
            if ($random_category_stats['avg'] > 2000) {
                $status_class = 'test-error';
                $status_text = 'SLOW - check server/category performance';
            } elseif ($random_category_stats['avg'] > 1000) {
                $status_class = 'performance-warning';
                $status_text = 'MODERATE';
            } else {
                $status_class = 'test-result';
                $status_text = 'GOOD';
            }
            
            echo "<div class='{$status_class}'><strong>Final Random Category Performance ({$status_text}): Best: " . number_format($random_category_stats['best'], 2) . "ms | Avg: " . number_format($random_category_stats['avg'], 2) . "ms | 95th: " . number_format($random_category_stats['percentile95'], 2) . "ms | Worst: " . number_format($random_category_stats['worst'], 2) . "ms</strong></div>";
        }
    } else {
        echo "<div class='performance-warning'>No random category available for testing - check if categories exist and are active</div>";
        $random_category_stats = 'No categories available';
    }
} catch (\Exception $e) {
    echo "<div class='test-error'>Random Category Test Error: " . $e->getMessage() . "</div>";
    $random_category_stats = 'Error: ' . $e->getMessage();
}

echo '<div class="console-subtitle">[UNCACHED HTTP PERFORMANCE]</div>';

// Test main page (uncached)
echo '<div class="console-prompt">Testing UNCACHED HTTP performance (' . $http_performance_iterations . ' iterations) - Main page with timestamp parameter...</div>';
$main_page_uncached_stats = $toolkit->runPerformanceTestMultipleTimes([$toolkit, 'testHTTPPerformanceUncached'], $http_performance_iterations, true, 'Main Page (Uncached)', [$baseUrl]);
if (is_string($main_page_uncached_stats)) {
    echo "<div class='test-error'>Main Page Uncached Performance Test: $main_page_uncached_stats</div>";
} else {
    // Determine status based on average response time (uncached should be slower)
    if ($main_page_uncached_stats['avg'] > 800) {
        $status_class = 'test-error';
        $status_text = 'SLOW - check server performance';
    } elseif ($main_page_uncached_stats['avg'] > 600) {
        $status_class = 'performance-warning';
        $status_text = 'MODERATE';
    } else {
        $status_class = 'test-result';
        $status_text = 'GOOD';
    }
    
    echo "<div class='{$status_class}'><strong>Final Main Page Uncached Performance ({$status_text}): Best: " . number_format($main_page_uncached_stats['best'], 2) . "ms | Avg: " . number_format($main_page_uncached_stats['avg'], 2) . "ms | 95th: " . number_format($main_page_uncached_stats['percentile95'], 2) . "ms | Worst: " . number_format($main_page_uncached_stats['worst'], 2) . "ms</strong></div>";
}

// Test random product page (uncached)
echo '<div class="console-prompt">Testing UNCACHED HTTP performance (' . $http_performance_iterations . ' iterations) - Random product page with timestamp parameter...</div>';
try {
    $randomProductUrl = $block->getRandomProductUrl();
    if ($randomProductUrl) {
        echo '<div class="console-prompt">Random Product URL: ' . $randomProductUrl . '</div>';
        $random_product_uncached_stats = $toolkit->runPerformanceTestMultipleTimes([$toolkit, 'testHTTPPerformanceUncached'], $http_performance_iterations, true, 'Random Product (Uncached)', [$randomProductUrl]);
        if (is_string($random_product_uncached_stats)) {
            echo "<div class='test-error'>Random Product Uncached Performance Test: $random_product_uncached_stats</div>";
        } else {
            // Determine status based on average response time (product pages are typically slower)
            if ($random_product_uncached_stats['avg'] > 800) {
                $status_class = 'test-error';
                $status_text = 'SLOW - check server/product performance';
            } elseif ($random_product_uncached_stats['avg'] > 600) {
                $status_class = 'performance-warning';
                $status_text = 'MODERATE';
            } else {
                $status_class = 'test-result';
                $status_text = 'GOOD';
            }
            
            echo "<div class='{$status_class}'><strong>Final Random Product Uncached Performance ({$status_text}): Best: " . number_format($random_product_uncached_stats['best'], 2) . "ms | Avg: " . number_format($random_product_uncached_stats['avg'], 2) . "ms | 95th: " . number_format($random_product_uncached_stats['percentile95'], 2) . "ms | Worst: " . number_format($random_product_uncached_stats['worst'], 2) . "ms</strong></div>";
        }
    } else {
        echo "<div class='performance-warning'>No random product available for testing - check if products exist and are enabled</div>";
        $random_product_uncached_stats = 'No products available';
    }
} catch (\Exception $e) {
    echo "<div class='test-error'>Random Product Test Error: " . $e->getMessage() . "</div>";
    $random_product_uncached_stats = 'Error: ' . $e->getMessage();
}

// Test random category page (uncached)
echo '<div class="console-prompt">Testing UNCACHED HTTP performance (' . $http_performance_iterations . ' iterations) - Random category page with timestamp parameter...</div>';
try {
    $randomCategoryUrl = $block->getRandomCategoryUrl();
    if ($randomCategoryUrl) {
        echo '<div class="console-prompt">Random Category URL: ' . $randomCategoryUrl . '</div>';
        $random_category_uncached_stats = $toolkit->runPerformanceTestMultipleTimes([$toolkit, 'testHTTPPerformanceUncached'], $http_performance_iterations, true, 'Random Category (Uncached)', [$randomCategoryUrl]);
        if (is_string($random_category_uncached_stats)) {
            echo "<div class='test-error'>Random Category Uncached Performance Test: $random_category_uncached_stats</div>";
        } else {
            // Determine status based on average response time (category pages can vary greatly)
            if ($random_category_uncached_stats['avg'] > 1000) {
                $status_class = 'test-error';
                $status_text = 'SLOW - check server/category performance';
            } elseif ($random_category_uncached_stats['avg'] > 800) {
                $status_class = 'performance-warning';
                $status_text = 'MODERATE';
            } else {
                $status_class = 'test-result';
                $status_text = 'GOOD';
            }
            
            echo "<div class='{$status_class}'><strong>Final Random Category Uncached Performance ({$status_text}): Best: " . number_format($random_category_uncached_stats['best'], 2) . "ms | Avg: " . number_format($random_category_uncached_stats['avg'], 2) . "ms | 95th: " . number_format($random_category_uncached_stats['percentile95'], 2) . "ms | Worst: " . number_format($random_category_uncached_stats['worst'], 2) . "ms</strong></div>";
        }
    } else {
        echo "<div class='performance-warning'>No random category available for testing - check if categories exist and are active</div>";
        $random_category_uncached_stats = 'No categories available';
    }
} catch (\Exception $e) {
    echo "<div class='test-error'>Random Category Test Error: " . $e->getMessage() . "</div>";
    $random_category_uncached_stats = 'Error: ' . $e->getMessage();
}

echo '<div class="console-subtitle">[CACHE PERFORMANCE COMPARISON]</div>';

// Compare cached vs uncached performance for main page
if (!is_string($main_page_stats) && !is_string($main_page_uncached_stats)) {
    $main_cache_benefit_percent = (($main_page_uncached_stats['avg'] - $main_page_stats['avg']) / $main_page_uncached_stats['avg']) * 100;
    $main_cache_benefit_ms = $main_page_uncached_stats['avg'] - $main_page_stats['avg'];
    
    if ($main_cache_benefit_percent > 50) {
        $cache_status_class = 'test-result';
        $cache_status_text = 'EXCELLENT cache benefit';
    } elseif ($main_cache_benefit_percent > 25) {
        $cache_status_class = 'performance-result';
        $cache_status_text = 'GOOD cache benefit';
    } elseif ($main_cache_benefit_percent > 10) {
        $cache_status_class = 'performance-warning';
        $cache_status_text = 'MODERATE cache benefit';
    } else {
        $cache_status_class = 'test-error';
        $cache_status_text = 'LOW cache benefit - check cache configuration';
    }
    
    echo "<div class='{$cache_status_class}'><strong>Main Page Cache Impact ({$cache_status_text}): Cached: " . number_format($main_page_stats['avg'], 2) . "ms | Uncached: " . number_format($main_page_uncached_stats['avg'], 2) . "ms | Cache saves: " . number_format($main_cache_benefit_ms, 2) . "ms (" . number_format($main_cache_benefit_percent, 1) . "%)</strong></div>";
}

// Compare cached vs uncached performance for random product
if (!is_string($random_product_stats) && !is_string($random_product_uncached_stats)) {
    $product_cache_benefit_percent = (($random_product_uncached_stats['avg'] - $random_product_stats['avg']) / $random_product_uncached_stats['avg']) * 100;
    $product_cache_benefit_ms = $random_product_uncached_stats['avg'] - $random_product_stats['avg'];
    
    if ($product_cache_benefit_percent > 50) {
        $cache_status_class = 'test-result';
        $cache_status_text = 'EXCELLENT cache benefit';
    } elseif ($product_cache_benefit_percent > 25) {
        $cache_status_class = 'performance-result';
        $cache_status_text = 'GOOD cache benefit';
    } elseif ($product_cache_benefit_percent > 10) {
        $cache_status_class = 'performance-warning';
        $cache_status_text = 'MODERATE cache benefit';
    } else {
        $cache_status_class = 'test-error';
        $cache_status_text = 'LOW cache benefit - check cache configuration';
    }
    
    echo "<div class='{$cache_status_class}'><strong>Random Product Cache Impact ({$cache_status_text}): Cached: " . number_format($random_product_stats['avg'], 2) . "ms | Uncached: " . number_format($random_product_uncached_stats['avg'], 2) . "ms | Cache saves: " . number_format($product_cache_benefit_ms, 2) . "ms (" . number_format($product_cache_benefit_percent, 1) . "%)</strong></div>";
}

// Compare cached vs uncached performance for random category
if (!is_string($random_category_stats) && !is_string($random_category_uncached_stats)) {
    $category_cache_benefit_percent = (($random_category_uncached_stats['avg'] - $random_category_stats['avg']) / $random_category_uncached_stats['avg']) * 100;
    $category_cache_benefit_ms = $random_category_uncached_stats['avg'] - $random_category_stats['avg'];
    
    if ($category_cache_benefit_percent > 50) {
        $cache_status_class = 'test-result';
        $cache_status_text = 'EXCELLENT cache benefit';
    } elseif ($category_cache_benefit_percent > 25) {
        $cache_status_class = 'performance-result';
        $cache_status_text = 'GOOD cache benefit';
    } elseif ($category_cache_benefit_percent > 10) {
        $cache_status_class = 'performance-warning';
        $cache_status_text = 'MODERATE cache benefit';
    } else {
        $cache_status_class = 'test-error';
        $cache_status_text = 'LOW cache benefit - check cache configuration';
    }
    
    echo "<div class='{$cache_status_class}'><strong>Random Category Cache Impact ({$cache_status_text}): Cached: " . number_format($random_category_stats['avg'], 2) . "ms | Uncached: " . number_format($random_category_uncached_stats['avg'], 2) . "ms | Cache saves: " . number_format($category_cache_benefit_ms, 2) . "ms (" . number_format($category_cache_benefit_percent, 1) . "%)</strong></div>";
}

// Overall cache effectiveness summary
$total_tests = 0;
$total_cache_benefit = 0;
$cache_working_tests = 0;

if (!is_string($main_page_stats) && !is_string($main_page_uncached_stats)) {
    $total_tests++;
    $total_cache_benefit += $main_cache_benefit_percent;
    if ($main_cache_benefit_percent > 10) $cache_working_tests++;
}

if (!is_string($random_product_stats) && !is_string($random_product_uncached_stats)) {
    $total_tests++;
    $total_cache_benefit += $product_cache_benefit_percent;
    if ($product_cache_benefit_percent > 10) $cache_working_tests++;
}

if (!is_string($random_category_stats) && !is_string($random_category_uncached_stats)) {
    $total_tests++;
    $total_cache_benefit += $category_cache_benefit_percent;
    if ($category_cache_benefit_percent > 10) $cache_working_tests++;
}

if ($total_tests > 0) {
    $avg_cache_benefit = $total_cache_benefit / $total_tests;
    $cache_effectiveness = ($cache_working_tests / $total_tests) * 100;
    
    if ($avg_cache_benefit > 40 && $cache_effectiveness > 80) {
        $overall_status_class = 'test-result';
        $overall_status_text = 'EXCELLENT overall cache performance';
    } elseif ($avg_cache_benefit > 25 && $cache_effectiveness > 60) {
        $overall_status_class = 'performance-result';
        $overall_status_text = 'GOOD overall cache performance';
    } elseif ($avg_cache_benefit > 15 && $cache_effectiveness > 40) {
        $overall_status_class = 'performance-warning';
        $overall_status_text = 'MODERATE overall cache performance';
    } else {
        $overall_status_class = 'test-error';
        $overall_status_text = 'POOR overall cache performance - review cache configuration';
    }
    
    echo "<div class='{$overall_status_class}'><strong>Overall Cache Effectiveness ({$overall_status_text}): Average benefit: " . number_format($avg_cache_benefit, 1) . "%</strong></div>";
}

// Cache Performance Warning
echo '<div class="performance-warning">';
echo '<strong>⚠ IMPORTANT CACHE LIMITATIONS:</strong><br/>';
echo '• Full Page Cache (FPC) primarily benefits <strong>guest visitors</strong> only<br/>';
echo '• Logged-in customers typically <strong>miss FPC</strong> and receive uncached content<br/>';
echo '• Cache can be <strong>invalidated at any time</strong> due to content updates, promotions, or configuration changes<br/>';
echo '• Cache performance benefits are <strong>not guaranteed</strong> for your actual application traffic<br/>';
echo '• These tests show <strong>best-case scenarios</strong> - real-world performance may vary significantly<br/>';
echo '• <strong>Search requests</strong> and <strong>category filters</strong> are almost never cached due to their dynamic nature<br/>';
echo '• Focus on optimizing <strong>uncached performance</strong> for sustainable long-term improvements';
echo '</div>';

echo '<div class="console-subtitle">[OPCACHE STATUS]</div>';

// Display OPcache configuration checks
echo $block->displayChecks('OPcache Status:', $block->checkOPcacheConfiguration());

echo '<div class="console-subtitle">[PHP CONFIGURATION ANALYSIS]</div>';

// Display PHP configuration checks
echo $block->displayChecks('PHP Configuration:', $block->checkPHPConfiguration());
echo $block->displayChecks('Server Configuration:', $block->checkServerConfiguration());

echo '<div class="console-subtitle">[COMPOSER OPTIMIZATION]</div>';

// Display Composer optimization checks
echo $block->displayChecks('Composer Optimization:', $block->checkComposerOptimization());

echo '<div class="console-subtitle">[DATABASE ANALYSIS]</div>';

// Display database table size checks
echo $block->displayChecks('Top 5 Largest Database Tables:', $block->checkDatabaseTableSizes());

echo '<div class="console-subtitle">[REDIS MEMORY ANALYSIS]</div>';

// Display Redis memory usage checks
echo $block->displayChecks('Redis Memory Usage:', $block->checkRedisMemoryUsage());

echo '<div class="console-subtitle">[MAGENTO CONFIGURATION]</div>';

// Display Magento configuration checks
echo $block->displayChecks('Magento Configuration:', $block->checkMagentoConfiguration());

echo '<div class="console-subtitle">[SECURITY ANALYSIS]</div>';

// Display security checks
echo $block->displayChecks('Security Configuration:', $block->checkSecurity());
?>
<?php
// Initialize escaper at the top for the entire template
$objectManager = \Magento\Framework\App\ObjectManager::getInstance();
$escaper = $objectManager->get(\Magento\Framework\Escaper::class);
?>

<div class="performance-card">
    <div class="performance-card-header">
        <h2><?= $escaper->escapeHtml(__('PHP OPcache Status Check')) ?></h2>
    </div>
    <div class="performance-card-body">
        <?php
        /**
         * @var \Genaker\Opcache\Block\Adminhtml\Index\Gui $block
         */
        
        /**
         * Check OPcache status and configuration
         * Provides warnings about suboptimal settings
         */
        if (extension_loaded('Zend OPcache') && is_array(opcache_get_status())) {
            try {
                // Get OPcache status and configuration
                $opcacheStatus = opcache_get_status(false);
                $opcacheConfig = opcache_get_configuration();
                
                // Check OPcache status is valid
                if (!is_array($opcacheStatus) || !is_array($opcacheConfig)) {
                    throw new \RuntimeException('Invalid OPcache status or configuration data');
                }
                
                // Calculate OPcache memory usage
                $memoryUsed = $opcacheStatus['memory_usage']['used_memory'] ?? 0;
                $memoryFree = $opcacheStatus['memory_usage']['free_memory'] ?? 0;
                $memoryWasted = $opcacheStatus['memory_usage']['wasted_memory'] ?? 0;
                $memoryTotal = $memoryUsed + $memoryFree + $memoryWasted;
                
                // Get key settings
                $validateTimestamps = $opcacheConfig['directives']['opcache.validate_timestamps'] ?? null;
                $revalidateFreq = $opcacheConfig['directives']['opcache.revalidate_freq'] ?? null;
                $maxAcceleratedFiles = $opcacheConfig['directives']['opcache.max_accelerated_files'] ?? null;
                $memoryConsumption = $opcacheConfig['directives']['opcache.memory_consumption'] / 1024 / 1024 ?? null;
                
                // Memory utilization percentage
                $memoryUtilizationPct = ($memoryTotal > 0) ? ($memoryUsed / $memoryTotal) * 100 : 0;
                
                // Check for insufficient memory (less than 32MB free)
                if ($memoryFree < 32 * 1024 * 1024) {
                    echo '<div class="performance-warning">' .
                        '<strong>' . $escaper->escapeHtml(__('Warning')) . ':</strong> ' .
                        $escaper->escapeHtml(__('Low OPcache free memory. Consider increasing opcache.memory_consumption.')) .
                        ' ' . $escaper->escapeHtml(__('Current free memory:')) . ' ' .
                        $escaper->escapeHtml(number_format($memoryFree / 1024 / 1024, 2)) . ' MB' .
                    '</div>';
                }
                
                // Check for timestamp validation in production
                if ($validateTimestamps === true) {
                    echo '<div class="performance-warning">' .
                        '<strong>' . $escaper->escapeHtml(__('Warning')) . ':</strong> ' .
                        $escaper->escapeHtml(__('Timestamp validation is enabled. For optimal performance in production, disable opcache.validate_timestamps in php.ini')) .
                    '</div>';
                }
                
                // Check for low max_accelerated_files
                if ($maxAcceleratedFiles !== null && $maxAcceleratedFiles < 50000) {
                    echo '<div class="performance-warning">' .
                        '<strong>' . $escaper->escapeHtml(__('Warning')) . ':</strong> ' .
                        $escaper->escapeHtml(__('Low max_accelerated_files setting. For Magento 2, at least 50,000 is recommended.')) .
                        ' ' . $escaper->escapeHtml(__('Current setting:')) . ' ' .
                        $escaper->escapeHtml(number_format($maxAcceleratedFiles)) .
                    '</div>';
                }
                
                // Check for low memory_consumption
                if ($memoryConsumption !== null && $memoryConsumption < 256) {
                    echo '<div class="performance-warning">' .
                        '<strong>' . $escaper->escapeHtml(__('Warning')) . ':</strong> ' .
                        $escaper->escapeHtml(__('Low memory_consumption setting. For Magento 2, at least 256MB is recommended.')) .
                        ' ' . $escaper->escapeHtml(__('Current setting:')) . ' ' .
                        $escaper->escapeHtml($memoryConsumption) . ' MB' .
                    '</div>';
                }
                
                // Display OPcache memory stats
                echo '<div class="performance-result">' .
                    $escaper->escapeHtml(__('Memory Usage:')) . ' ' .
                    $escaper->escapeHtml(number_format($memoryUsed / 1024 / 1024, 2)) . ' MB ' . $escaper->escapeHtml(__('used')) . ', ' .
                    $escaper->escapeHtml(number_format($memoryFree / 1024 / 1024, 2)) . ' MB ' . $escaper->escapeHtml(__('free')) . ', ' .
                    $escaper->escapeHtml(number_format($memoryWasted / 1024 / 1024, 2)) . ' MB ' . $escaper->escapeHtml(__('wasted')) . ' (' .
                    $escaper->escapeHtml(number_format($memoryUtilizationPct, 1)) . '% ' . $escaper->escapeHtml(__('utilization')) . ')' .
                '</div>';
                
                // Display hit rate if available
                if (isset($opcacheStatus['opcache_statistics']['hit_rate'])) {
                    $hitRate = $opcacheStatus['opcache_statistics']['hit_rate'];
                    echo '<div class="performance-result">' .
                        $escaper->escapeHtml(__('Hit Rate:')) . ' ' .
                        $escaper->escapeHtml(number_format($hitRate, 2)) . '%' .
                    '</div>';
                }
                
                // Display memory consumption setting
                if ($memoryConsumption !== null) {
                    echo '<div class="performance-result">' .
                        $escaper->escapeHtml(__('Memory Allocation:')) . ' ' .
                        $escaper->escapeHtml($memoryConsumption) . ' MB' .
                    '</div>';
                }
                
                // Display max accelerated files
                if ($maxAcceleratedFiles !== null) {
                    echo '<div class="performance-result">' .
                        $escaper->escapeHtml(__('Max Accelerated Files:')) . ' ' .
                        $escaper->escapeHtml(number_format($maxAcceleratedFiles)) .
                    '</div>';
                }
                
                // Get script cached count if available
                if (isset($opcacheStatus['opcache_statistics']['num_cached_scripts'])) {
                    $numCachedScripts = $opcacheStatus['opcache_statistics']['num_cached_scripts'];
                    echo '<div class="performance-result">' .
                        $escaper->escapeHtml(__('Cached Scripts:')) . ' ' .
                        $escaper->escapeHtml(number_format($numCachedScripts)) .
                    '</div>';
                }
                
            } catch (\Exception $e) {
                echo '<div class="performance-error">' .
                    '<strong>' . $escaper->escapeHtml(__('Error')) . ':</strong> ' .
                    $escaper->escapeHtml($e->getMessage()) .
                '</div>';
            }
        } else {
            echo '<div class="performance-error">' .
                '<strong>' . $escaper->escapeHtml(__('Error')) . ':</strong> ' .
                $escaper->escapeHtml(__('Zend OPcache extension is not loaded. OPcache is not working.')) .
            '</div>';
        }

        // Check for Xdebug which impacts performance
        if (extension_loaded('xdebug')) {
            echo '<div class="performance-warning">' .
                '<strong>' . $escaper->escapeHtml(__('Warning')) . ':</strong> ' .
                $escaper->escapeHtml(__('Xdebug is enabled. This causes significant performance overhead. Disable Xdebug on production servers.')) .
            '</div>';
        }
        ?>
    </div>
</div>

        </div> <!-- Close console-container -->
    </div> <!-- Close collapsible-content -->
</div> <!-- Close collapsible-wrapper -->

<script>
function toggleCollapsible() {
    const content = document.getElementById('console-content');
    const header = document.querySelector('.collapsible-header');
    const toggle = document.querySelector('.collapsible-toggle');
    
    if (content.classList.contains('expanded')) {
        // Collapse
        content.classList.remove('expanded');
        content.classList.add('collapsed');
        header.classList.add('collapsed');
        toggle.textContent = '▶';
    } else {
        // Expand
        content.classList.remove('collapsed');
        content.classList.add('expanded');
        header.classList.remove('collapsed');
        toggle.textContent = '▼';
    }
}

// Filter results functionality
let currentFilter = 'all';

function filterResults(filterType) {
    currentFilter = filterType;
    
    // Update active button
    document.querySelectorAll('.filter-btn').forEach(btn => {
        btn.classList.remove('active');
    });
    event.target.classList.add('active');
    
    // Get all result elements
    const elements = document.querySelectorAll('.test-result, .test-error, .performance-warning, .performance-result');
    
    elements.forEach(element => {
        let show = false;
        
        switch (filterType) {
            case 'all':
                show = true;
                break;
            case 'error':
                show = element.classList.contains('test-error');
                break;
            case 'warning':
                show = element.classList.contains('performance-warning');
                break;
            case 'errors-warnings':
                show = element.classList.contains('test-error') || element.classList.contains('performance-warning');
                break;
            case 'issues':
                show = element.classList.contains('test-error') || element.classList.contains('performance-warning');
                break;
        }
        
        if (show) {
            element.classList.remove('filter-hidden');
        } else {
            element.classList.add('filter-hidden');
        }
    });
    
    // Filter console-prompt elements based on their associated results
    const prompts = document.querySelectorAll('.console-prompt');
    prompts.forEach(prompt => {
        let shouldHidePrompt = true;
        let currentElement = prompt.nextElementSibling;
        
        // Look through following elements until we find the next prompt or end
        while (currentElement && !currentElement.classList.contains('console-prompt')) {
            // If we find a result element that's visible, keep the prompt
            if ((currentElement.classList.contains('test-result') || 
                 currentElement.classList.contains('test-error') || 
                 currentElement.classList.contains('performance-warning') || 
                 currentElement.classList.contains('performance-result')) &&
                !currentElement.classList.contains('filter-hidden')) {
                shouldHidePrompt = false;
                break;
            }
            currentElement = currentElement.nextElementSibling;
        }
        
        // Hide/show the prompt based on whether it has visible results
        if (shouldHidePrompt && filterType !== 'all') {
            prompt.classList.add('filter-hidden');
        } else {
            prompt.classList.remove('filter-hidden');
        }
    });
    
    // Also filter console-subtitle elements (section headers)
    const subtitles = document.querySelectorAll('.console-subtitle');
    subtitles.forEach(subtitle => {
        let shouldHideSubtitle = true;
        let currentElement = subtitle.nextElementSibling;
        
        // Look through following elements until we find the next subtitle or end
        while (currentElement && !currentElement.classList.contains('console-subtitle')) {
            // If we find a result element that's visible, keep the subtitle
            if ((currentElement.classList.contains('test-result') || 
                 currentElement.classList.contains('test-error') || 
                 currentElement.classList.contains('performance-warning') || 
                 currentElement.classList.contains('performance-result') ||
                 currentElement.classList.contains('console-prompt')) &&
                !currentElement.classList.contains('filter-hidden')) {
                shouldHideSubtitle = false;
                break;
            }
            currentElement = currentElement.nextElementSibling;
        }
        
        // Hide/show the subtitle based on whether it has visible content
        if (shouldHideSubtitle && filterType !== 'all') {
            subtitle.classList.add('filter-hidden');
        } else {
            subtitle.classList.remove('filter-hidden');
        }
    });
    
    // Update filter summary
    updateFilterSummary();
}

function updateFilterSummary() {
    const visible = document.querySelectorAll('.test-result:not(.filter-hidden), .test-error:not(.filter-hidden), .performance-warning:not(.filter-hidden), .performance-result:not(.filter-hidden)').length;
    const total = document.querySelectorAll('.test-result, .test-error, .performance-warning, .performance-result').length;
    
    // Create or update summary
    let summary = document.querySelector('.filter-summary');
    if (!summary) {
        summary = document.createElement('div');
        summary.className = 'filter-summary';
        summary.style.cssText = 'color: #00aaff; font-size: 11px; margin-top: 5px;';
        document.querySelector('.filter-controls').appendChild(summary);
    }
    
    summary.textContent = `Showing ${visible} of ${total} results`;
}

// Initialize filter summary on page load
document.addEventListener('DOMContentLoaded', function() {
    updateFilterSummary();
});
</script>

		
<?php
try {
    if (!class_exists(\Amnuts\Opcache\Service::class)) {
        throw new \RuntimeException(
            __('Amnuts\Opcache\Service class is not available. Make sure the amnuts/opcache-gui package is installed.')
        );
    }
    
    // Initialize the OPcache GUI service
    $opcacheGui = (new \Amnuts\Opcache\Service())->handle();
    
    echo '<div class="opcache-dashboard">';
	echo "<h2>OPcache GUI</h2>";
    
    // Include the OPcache GUI interface
    require_once BP . '/vendor/amnuts/opcache-gui/index.php';
    
    echo '</div>';
} catch (\Exception $e) {
    echo '<div class="performance-error">' .
        '<strong>' . $escaper->escapeHtml(__('Error loading OPcache GUI:')) . '</strong> ' .
        $escaper->escapeHtml($e->getMessage()) .
    '</div>';
}
?>