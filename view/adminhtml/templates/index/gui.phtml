<style>
    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
    }
    
    .opcache-gui {
        background-color: white;
    }

    
    body {
        background: #000000;
        --color: #00ff00;

    }
    
    .opcache-iframe-content {
        width: 100%;
        height: 100%;
        margin: 0;
        padding: 0;
        background: #000000;
    }
    
    .console-container {
        background: #000000;
        color: #00ff00;
        min-height: 100%;
        height: 100%;
        width: 100%;
        padding: 10px;
        font-family: 'Courier New', 'Liberation Mono', monospace;
        font-size: 12px;
        line-height: 1.4;
        border: 1px solid #333333;
        overflow-y: auto;
        overflow-x: hidden;
    }
    
    .console-header {
        border-bottom: 1px solid #333333;
        padding-bottom: 10px;
        margin-bottom: 20px;
        color: #00ffff;
    }
    
    .console-title {
        color: #00ffff;
        font-size: 16px;
        font-weight: bold;
        margin-bottom: 5px;
    }
    
    .console-subtitle {
        color: #ffff00;
        font-size: 14px;
        margin: 10px 0;
        border-bottom: 1px solid #333333;
        padding-bottom: 5px;
    }
    
    .test-result {
        color: #00ff00;
        background: #001100;
        padding: 5px 10px;
        margin: 2px 0;
        border-left: 3px solid #00ff00;
        font-family: 'Courier New', monospace;
    }
    
    .test-result:before {
        content: "✓ ";
        color: #00ff00;
        font-weight: bold;
    }
    
    .test-error {
        color: #ff0000;
        background: #110000;
        padding: 5px 10px;
        margin: 2px 0;
        border-left: 3px solid #ff0000;
        font-family: 'Courier New', monospace;
        font-weight: bold;
    }
    
    .test-error:before {
        content: "✗ ERROR: ";
        color: #ff0000;
        font-weight: bold;
    }
    
    .performance-card {
        margin: 15px 0;
        border: 1px solid #333333;
        background: #001122;
    }
    
    .performance-card-header {
        background: #002244;
        padding: 10px;
        border-bottom: 1px solid #333333;
    }
    
    .performance-card-header h2 {
        margin: 0;
        font-size: 14px;
        color: #00ffff;
        font-family: 'Courier New', monospace;
        font-weight: bold;
    }
    
    .performance-card-body {
        padding: 15px;
        background: #000011;
    }
    
    .performance-warning {
        color: #ffff00;
        background: #221100;
        padding: 5px 10px;
        margin: 5px 0;
        border-left: 3px solid #ffff00;
        font-family: 'Courier New', monospace;
    }
    
    .performance-warning:before {
        content: "⚠ WARNING: ";
        color: #ffff00;
        font-weight: bold;
    }
    
    .performance-result {
        color: #00dddd;
        background: #001111;
        padding: 3px 10px;
        margin: 2px 0;
        border-left: 2px solid #00dddd;
        font-family: 'Courier New', monospace;
    }
    
    .performance-result:before {
        content: "→ ";
        color: #00dddd;
    }
    
    .performance-error {
        color: #ff0000;
        background: #220000;
        padding: 5px 10px;
        margin: 5px 0;
        border-left: 3px solid #ff0000;
        font-family: 'Courier New', monospace;
        font-weight: bold;
    }
    
    .performance-error:before {
        content: "✗ CRITICAL: ";
        color: #ff0000;
        font-weight: bold;
    }
    
    .opcache-dashboard {
        margin-top: 20px;
        padding: 15px;
        border: 1px solid #333333;
        background: #000022;
    }
    
    .console-prompt {
        color: #00ff00;
        font-weight: bold;
    }
    
    .console-prompt:before {
        content: "root@opcache:~$ ";
        color: #00ffff;
    }
    
    .console-container h1, .console-container h2, .console-container h3 {
        color: #00ffff;
        font-family: 'Courier New', monospace;
        margin: 10px 0 5px 0;
    }
    
    /* Filter Controls */
    .filter-controls {
        background: #111111;
        border: 1px solid #333333;
        padding: 10px;
        margin: 10px 0 20px 0;
        border-radius: 3px;
    }
    
    .filter-controls h4 {
        color: #00ffff;
        margin: 0 0 10px 0;
        font-size: 12px;
    }
    
    .filter-buttons {
        display: flex;
        gap: 10px;
        flex-wrap: wrap;
    }
    
    .filter-btn {
        background: #222222;
        border: 1px solid #555555;
        color: #00ff00;
        padding: 5px 12px;
        font-family: 'Courier New', monospace;
        font-size: 11px;
        cursor: pointer;
        border-radius: 3px;
        transition: all 0.2s;
    }
    
    .filter-btn:hover {
        background: #333333;
        border-color: #777777;
    }
    
    .filter-btn.active {
        background: #00ff00;
        color: #000000;
        border-color: #00ff00;
    }
    
    .filter-btn.error-btn.active {
        background: #ff4444;
        color: #ffffff;
        border-color: #ff4444;
    }
    
    .filter-btn.warning-btn.active {
        background: #ffaa00;
        color: #000000;
        border-color: #ffaa00;
    }
    

    
    /* Hidden filter items */
    .filter-hidden {
        display: none !important;
    }
    
    /* Scrollbar styling for webkit browsers */
    ::-webkit-scrollbar {
        width: 12px;
    }
    
    ::-webkit-scrollbar-track {
        background: #000000;
    }
    
    ::-webkit-scrollbar-thumb {
        background: #333333;
        border-radius: 3px;
    }
    
    ::-webkit-scrollbar-thumb:hover {
        background: #555555;
    }
    .menu-wrapper {
        display: none;
    }

    .collapsible-wrapper {
        background: #000000;
        border: 1px solid #333333;
        margin: 10px 0;
    }

    .collapsible-header {
        background: #001122;
        padding: 10px 15px;
        cursor: pointer;
        border-bottom: 1px solid #333333;
        color: #00ffff;
        font-family: 'Courier New', monospace;
        font-weight: bold;
        display: flex;
        justify-content: space-between;
        align-items: center;
        user-select: none;
    }

    .collapsible-header:hover {
        background: #002244;
    }

    .collapsible-toggle {
        color: #00ff00;
        font-size: 14px;
        transition: transform 0.3s ease;
    }

    .collapsible-content {
        transition: max-height 0.3s ease-out;
        overflow: hidden;
    }

    .collapsible-content.collapsed {
        max-height: 400px; /* Approximately 10 lines * 40px line height */
    }

    .collapsible-content.expanded {
        max-height: none;
    }

    .collapsible-header.collapsed .collapsible-toggle {
        transform: rotate(-90deg);
    }

    .fade-indicator {
        position: relative;
    }

    .fade-indicator.collapsed::after {
        content: "";
        position: absolute;
        bottom: 0;
        left: 0;
        right: 0;
        height: 60px;
        background: linear-gradient(transparent, #000000);
        pointer-events: none;
    }

    li.nav-tab.nav-tab-link-realtime {
        display: none !important;
    }

    /* Ask AI Console Button Styles */
    .ask-ai-console-btn {
        color: #00ffff;
        cursor: pointer;
        font-family: 'Courier New', monospace;
        font-weight: bold;
        text-decoration: none;
        margin-left: 10px;
        transition: color 0.2s ease;
        user-select: none;
    }
    
    .ask-ai-console-btn:hover {
        color: #ffffff;
        text-decoration: underline;
    }
    
    .ask-ai-console-btn:active {
        color: #00ff00;
    }
    
    .ajax-warning-result {
        margin: 10px 0;
        padding: 10px;
        border-radius: 8px;
        background: #001111;
        border-left: 4px solid #00ffff;
        border: 1px solid #333333;
    }
    
    .ajax-response {
        color: #ffffff;
        line-height: 1.4;
        font-family: monospace, 'Consolas', 'Monaco', 'Lucida Console', 'Liberation Mono', 'DejaVu Sans Mono', 'Bitstream Vera Sans Mono', 'Courier New';
        font-size: 13px;
    }
    
    .ajax-error {
        color: #ff4444;
        font-weight: bold;
        font-family: monospace, 'Consolas', 'Monaco', 'Lucida Console', 'Liberation Mono', 'DejaVu Sans Mono', 'Bitstream Vera Sans Mono', 'Courier New';
        font-size: 13px;
    }
    
    .loading {
        color: #ffff00;
        font-style: italic;
        font-family: monospace, 'Consolas', 'Monaco', 'Lucida Console', 'Liberation Mono', 'DejaVu Sans Mono', 'Bitstream Vera Sans Mono', 'Courier New';
        font-size: 13px;
    }

</style>
<script>
                    function askAI(warningId) {
                        var warningDiv = document.getElementById(warningId);
                        var warningText = warningDiv.textContent || warningDiv.innerText;
                        // Remove the button text from the warning text
                        warningText = warningText.replace(/\[Ask AI\]/g, '').trim();
                        
                        var resultDiv = document.getElementById(warningId + '-result');
                        resultDiv.style.display = 'block';
                        
                        // Create loading animation
                        var loadingDiv = document.createElement('div');
                        loadingDiv.className = 'loading';
                        loadingDiv.innerHTML = 'Loading AI response';
                        resultDiv.innerHTML = '';
                        resultDiv.appendChild(loadingDiv);
                        
                        // Start dots animation
                        var dotCount = 0;
                        var loadingInterval = setInterval(function() {
                            dotCount = (dotCount + 1) % 4; // 0, 1, 2, 3, then back to 0
                            var dots = '.'.repeat(dotCount);
                            loadingDiv.innerHTML = 'Loading AI response' + dots;
                        }, 500);
                        
                        var formData = 'query=' + encodeURIComponent(warningText) + 
                                      '&conversation_history=' + encodeURIComponent('[]') + 
                                      '&form_key=' + encodeURIComponent(window.FORM_KEY || '');
                        
                        fetch(window.location.origin + '/admin_1afzun1/magentomcpai/chat/query/?isAjax=true', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',
                                'X-Requested-With': 'XMLHttpRequest'
                            },
                            body: formData
                        })
                        .then(response => response.json())
                        .then(data => {
                            clearInterval(loadingInterval);
                            let message = data.message;
                            message = message.replace(/\n/g, '<br>').trim();
                            resultDiv.innerHTML = '<div class="ajax-response">💡 ' + message + '</div>';
                        })
                        .catch(error => {
                            clearInterval(loadingInterval);
                            resultDiv.innerHTML = '<div class="ajax-error">❌ Error: ' + error.message + '</div>';
                        });
                    }
</script>

<div class="collapsible-wrapper">
    <div class="collapsible-header" onclick="toggleCollapsible()">
        <span>Magento PHP OPcache & Performance Console</span>
        <span class="collapsible-toggle">▼</span>
    </div>
    <div class="collapsible-content expanded fade-indicator" id="console-content">
        <div class="console-container">
            <div class="console-header">
                <div class="console-title">╔══════════════════════════════════════╗</div>
                <div class="console-title">║&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PHP OPcache Monitoring Tool&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;║</div>
                <div class="console-title">╚══════════════════════════════════════╝</div>
            </div>
            
            <!-- Filter Controls -->
            <div class="filter-controls">
                <h4>Filter Results:</h4>
                <div class="filter-buttons">
                    <button class="filter-btn active" onclick="filterResults('all')">Show All</button>
                    <button class="filter-btn error-btn" onclick="filterResults('error')">Errors Only</button>
                    <button class="filter-btn warning-btn" onclick="filterResults('warning')">Warnings Only</button>
                    <!--<button class="filter-btn" onclick="filterResults('errors-warnings')">Errors + Warnings</button>-->
                    <button class="filter-btn" onclick="filterResults('issues')">Issues Only (Errors + Warnings)</button>
                </div>
            </div>

<?php
echo '<div class="console-subtitle">[PERFORMANCE BENCHMARK]</div>';
$toolkit = $block->getPerformanceToolkit();

// Display performance benchmarks using Block method
echo $block->displayChecks('Performance Benchmarks:', $block->runPerformanceBenchmarks());

echo '<div class="console-subtitle">[HTTP PERFORMANCE]</div>';
// Display HTTP performance tests
echo $block->displayChecks('HTTP Performance:', $block->runHTTPPerformanceTests());

echo '<div class="console-subtitle">[UNCACHED HTTP PERFORMANCE]</div>';

// Display uncached HTTP performance tests
echo $block->displayChecks('Uncached HTTP Performance:', $block->runUncachedHTTPPerformanceTests());


// Cache Performance Warning
echo '<div class="performance-warning">';
echo '<strong>⚠ IMPORTANT CACHE LIMITATIONS:</strong><br/>';
echo '• Full Page Cache (FPC) primarily benefits <strong>guest visitors</strong> only<br/>';
echo '• Logged-in customers typically <strong>miss FPC</strong> and receive uncached content<br/>';
echo '• Cache can be <strong>invalidated at any time</strong> due to content updates, promotions, or configuration changes<br/>';
echo '• Cache performance benefits are <strong>not guaranteed</strong> for your actual application traffic<br/>';
echo '• These tests show <strong>best-case scenarios</strong> - real-world performance may vary significantly<br/>';
echo '• <strong>Search requests</strong> and <strong>category filters</strong> are almost never cached due to their dynamic nature<br/>';
echo '• Focus on optimizing <strong>uncached performance</strong> for sustainable long-term improvements';
echo '</div>';

echo '<div class="console-subtitle">[OPCACHE STATUS]</div>';

// Display OPcache configuration checks
echo $block->displayChecks('OPcache Status and Configuration:', $block->checkOPcacheConfiguration());

echo '<div class="console-subtitle">[PHP CONFIGURATION ANALYSIS]</div>';

// Display PHP configuration checks
echo $block->displayChecks('PHP Configuration:', $block->checkPHPConfiguration());
echo $block->displayChecks('Server Configuration:', $block->checkServerConfiguration());

echo '<div class="console-subtitle">[COMPOSER OPTIMIZATION]</div>';

// Display Composer optimization checks
echo $block->displayChecks('Composer Optimization:', $block->checkComposerOptimization());

echo '<div class="console-subtitle">[DATABASE ANALYSIS]</div>';

// Display database table size checks
echo $block->displayChecks('Top 5 Largest Database Tables:', $block->checkDatabaseTableSizes());

echo '<div class="console-subtitle">[REDIS MEMORY ANALYSIS]</div>';

// Display Redis memory usage checks
echo $block->displayChecks('Redis Memory Usage:', $block->checkRedisMemoryUsage());

echo '<div class="console-subtitle">[MAGENTO CONFIGURATION]</div>';

// Display Magento configuration checks
echo $block->displayChecks('Magento Configuration:', $block->checkMagentoConfiguration());

echo '<div class="console-subtitle">[SECURITY ANALYSIS]</div>';

// Display security checks
echo $block->displayChecks('Security Configuration:', $block->checkSecurity());
?>
<?php
// Initialize escaper at the top for the entire template
$objectManager = \Magento\Framework\App\ObjectManager::getInstance();
$escaper = $objectManager->get(\Magento\Framework\Escaper::class);
?>

<div class="performance-card">
    <div class="performance-card-header">
        <h2><?= $escaper->escapeHtml(__('PHP OPcache Status Check')) ?></h2>
    </div>
    <div class="performance-card-body">
        <?php
        // Display OPcache configuration checks using Block method
        echo $block->displayChecks('OPcache Configuration:', $block->checkOPcacheConfiguration());
        ?>
    </div>
</div>

        </div> <!-- Close console-container -->
    </div> <!-- Close collapsible-content -->
</div> <!-- Close collapsible-wrapper -->

<script>
function toggleCollapsible() {
    const content = document.getElementById('console-content');
    const header = document.querySelector('.collapsible-header');
    const toggle = document.querySelector('.collapsible-toggle');
    
    if (content.classList.contains('expanded')) {
        // Collapse
        content.classList.remove('expanded');
        content.classList.add('collapsed');
        header.classList.add('collapsed');
        toggle.textContent = '▶';
    } else {
        // Expand
        content.classList.remove('collapsed');
        content.classList.add('expanded');
        header.classList.remove('collapsed');
        toggle.textContent = '▼';
    }
}

// Filter results functionality
let currentFilter = 'all';

function filterResults(filterType) {
    currentFilter = filterType;
    
    // Update active button
    document.querySelectorAll('.filter-btn').forEach(btn => {
        btn.classList.remove('active');
    });
    event.target.classList.add('active');
    
    // Get all result elements
    const elements = document.querySelectorAll('.test-result, .test-error, .performance-warning, .performance-result');
    
    elements.forEach(element => {
        let show = false;
        
        switch (filterType) {
            case 'all':
                show = true;
                break;
            case 'error':
                show = element.classList.contains('test-error');
                break;
            case 'warning':
                show = element.classList.contains('performance-warning');
                break;
            case 'errors-warnings':
                show = element.classList.contains('test-error') || element.classList.contains('performance-warning');
                break;
            case 'issues':
                show = element.classList.contains('test-error') || element.classList.contains('performance-warning');
                break;
        }
        
        if (show) {
            element.classList.remove('filter-hidden');
        } else {
            element.classList.add('filter-hidden');
        }
    });
    
    // Filter console-prompt elements based on their associated results
    const prompts = document.querySelectorAll('.console-prompt');
    prompts.forEach(prompt => {
        let shouldHidePrompt = true;
        let currentElement = prompt.nextElementSibling;
        
        // Look through following elements until we find the next prompt or end
        while (currentElement && !currentElement.classList.contains('console-prompt')) {
            // If we find a result element that's visible, keep the prompt
            if ((currentElement.classList.contains('test-result') || 
                 currentElement.classList.contains('test-error') || 
                 currentElement.classList.contains('performance-warning') || 
                 currentElement.classList.contains('performance-result')) &&
                !currentElement.classList.contains('filter-hidden')) {
                shouldHidePrompt = false;
                break;
            }
            currentElement = currentElement.nextElementSibling;
        }
        
        // Hide/show the prompt based on whether it has visible results
        if (shouldHidePrompt && filterType !== 'all') {
            prompt.classList.add('filter-hidden');
        } else {
            prompt.classList.remove('filter-hidden');
        }
    });
    
    // Also filter console-subtitle elements (section headers)
    const subtitles = document.querySelectorAll('.console-subtitle');
    subtitles.forEach(subtitle => {
        let shouldHideSubtitle = true;
        let currentElement = subtitle.nextElementSibling;
        
        // Look through following elements until we find the next subtitle or end
        while (currentElement && !currentElement.classList.contains('console-subtitle')) {
            // If we find a result element that's visible, keep the subtitle
            if ((currentElement.classList.contains('test-result') || 
                 currentElement.classList.contains('test-error') || 
                 currentElement.classList.contains('performance-warning') || 
                 currentElement.classList.contains('performance-result') ||
                 currentElement.classList.contains('console-prompt')) &&
                !currentElement.classList.contains('filter-hidden')) {
                shouldHideSubtitle = false;
                break;
            }
            currentElement = currentElement.nextElementSibling;
        }
        
        // Hide/show the subtitle based on whether it has visible content
        if (shouldHideSubtitle && filterType !== 'all') {
            subtitle.classList.add('filter-hidden');
        } else {
            subtitle.classList.remove('filter-hidden');
        }
    });
    
    // Update filter summary
    updateFilterSummary();
}

function updateFilterSummary() {
    const visible = document.querySelectorAll('.test-result:not(.filter-hidden), .test-error:not(.filter-hidden), .performance-warning:not(.filter-hidden), .performance-result:not(.filter-hidden)').length;
    const total = document.querySelectorAll('.test-result, .test-error, .performance-warning, .performance-result').length;
    
    // Create or update summary
    let summary = document.querySelector('.filter-summary');
    if (!summary) {
        summary = document.createElement('div');
        summary.className = 'filter-summary';
        summary.style.cssText = 'color: #00aaff; font-size: 11px; margin-top: 5px;';
        document.querySelector('.filter-controls').appendChild(summary);
    }
    
    summary.textContent = `Showing ${visible} of ${total} results`;
}

// Initialize filter summary on page load
document.addEventListener('DOMContentLoaded', function() {
    updateFilterSummary();
});
</script>

		
<?php
try {
    if (!class_exists(\Amnuts\Opcache\Service::class)) {
        throw new \RuntimeException(
            __('Amnuts\Opcache\Service class is not available. Make sure the amnuts/opcache-gui package is installed.')
        );
    }
    
    // Initialize the OPcache GUI service
    $opcacheGui = (new \Amnuts\Opcache\Service())->handle();
    
    echo '<div class="opcache-dashboard">';
	echo "<h2>OPcache GUI</h2>";
    
    // Include the OPcache GUI interface
    require_once BP . '/vendor/amnuts/opcache-gui/index.php';
    
    echo '</div>';
} catch (\Throwable $e) {
    echo '<div class="performance-error">' .
        '<strong>' . $escaper->escapeHtml(__('Error loading OPcache GUI:')) . '</strong> ' .
        $escaper->escapeHtml($e->getMessage()) .
    '</div>';
}
?>